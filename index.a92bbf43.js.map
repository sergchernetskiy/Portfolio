{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA0BA,SAASC,EAAgBC,GACvB,IAAMC,EAAWD,EAAEE,OAEnB,GAAID,EAASE,QAAQC,KAAM,CACzBJ,EAAEK,iBAEF,IAAMC,EAAKL,EAASE,QAAQC,KACtBG,EACJC,SAASC,eAAeH,GAAII,UAAYb,EAAAc,KAAKC,OAAOC,aAEtDC,OAAOC,SAAS,CACdC,IAAKT,EACLU,SAAU,WAEZhB,EAASiB,UAAUC,OAAO,WAtC1BtB,EAAAc,KAAKS,UAAUC,OAAS,GAC1BxB,EAAAc,KAAKS,UAAUE,SAAQ,SAAArB,GACrBA,EAASsB,iBAAiB,QAASxB,MA0CvC,IAAgCyB,EAmBxBC,EAnBwBD,EAwBR3B,EAAAc,KAAKe,SALrBD,EAAK,IAAIE,sBAfC,SAACC,EAASC,GACxBD,EAAQN,SAAQ,SAAAQ,G,IAAG5B,EAAM4B,EAAN5B,OAAsB4B,EAAdC,eAEvBlC,EAAAc,KAAKS,UAAUE,SAAQ,SAAArB,GACrBA,EAASiB,UAAUc,OACjB,SACA9B,EAAOI,KAAOL,EAASE,QAAQC,SAInCH,SAASiB,UAAUC,OAAO,eAbhB,CACdc,UAAW,MAmBbT,EAAQF,SAAQ,SAAApB,G,OAAUuB,EAAGS,QAAQhC,M","sources":["src/js/smooth-scroll.js"],"sourcesContent":["import { refs } from './refs';\n\nif (refs.menuLinks.length > 0) {\n  refs.menuLinks.forEach(menuLink => {\n    menuLink.addEventListener('click', onMenuLinkClick);\n  });\n}\n\n// function onMenuLinkClick(e) {\n//   e.preventDefault();\n//   const menuLink = e.target;\n\n//   if (menuLink.dataset.goto && document.querySelector(menuLink.dataset.goto)) {\n//     const gotoBlock = document.querySelector(menuLink.dataset.goto);\n//     const gotoBlockValue =\n//       gotoBlock.getBoundingClientRect().top +\n//       window.pageYOffset -\n//       refs.header.offsetHeight;\n\n//     window.scrollTo({\n//       top: gotoBlockValue,\n//       behavior: 'smooth',\n//     });\n//   }\n// }\n\nfunction onMenuLinkClick(e) {\n  const menuLink = e.target;\n\n  if (menuLink.dataset.goto) {\n    e.preventDefault();\n\n    const id = menuLink.dataset.goto;\n    const gotoBlockValue =\n      document.getElementById(id).offsetTop - refs.header.offsetHeight;\n\n    window.scrollTo({\n      top: gotoBlockValue,\n      behavior: 'smooth',\n    });\n    menuLink.classList.remove('active');\n  }\n}\n\n///////////Active nav menu item///////////////\n\nconst changeActiveNavMenuItem = targets => {\n  const options = {\n    threshold: 0.65,\n  };\n  const onEntry = (entries, observer) => {\n    entries.forEach(({ target, isIntersecting }) => {\n      if (isIntersecting) {\n        refs.menuLinks.forEach(menuLink => {\n          menuLink.classList.toggle(\n            'active',\n            target.id === menuLink.dataset.goto\n          );\n        });\n      } else {\n        menuLink.classList.remove('active');\n      }\n    });\n  };\n\n  const io = new IntersectionObserver(onEntry, options);\n\n  targets.forEach(target => io.observe(target));\n};\n\nchangeActiveNavMenuItem(refs.sections);\n"],"names":["$4Nugj","parcelRequire","$6b5519f93f61ab5b$var$onMenuLinkClick","e","menuLink","target","dataset","goto","preventDefault","id","gotoBlockValue","document","getElementById","offsetTop","refs","header","offsetHeight","window","scrollTo","top","behavior","classList","remove","menuLinks","length","forEach","addEventListener","targets","io","sections","IntersectionObserver","entries","observer","param","isIntersecting","toggle","threshold","observe"],"version":3,"file":"index.a92bbf43.js.map"}